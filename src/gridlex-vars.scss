// =========================================
//     FEEL FREE TO EDIT BELOW THIS LINE
// =========================================

// HOW MANY COLUMNS IN YOUR GRID?
$columns: 12;

// <editor-fold desc="BREAKPOINTS">
$root-font-size: 16; // used in em calculations
$bp-micro: 320; // pixels - converted to ems
$bp-small: 640; // pixels - converted to ems
$bp-medium: 768; // pixels - converted to ems
$bp-large: 1024; // pixels - converted to ems
$bp-expanded: 1440; // pixels - converted to ems
// </editor-fold>

// <editor-fold desc="GRID SYSTEM CLASS NAMES">
$gl-gridName: grid !default;
$gl-colName: col !default;
// Default Breakpoint Names
$gl-microName: micro;
$gl-smallName: small;
$gl-mediumName: medium;
$gl-largeName: large;
$gl-expandedName: expanded;
$gl-vastName: vast;
// Common Alternative Breakpoint Names
/*
$gl-microName: micro;
$gl-smallName: mobile;
$gl-mediumName: tablet;
$gl-largeName: desktop;
$gl-expandedName: desktop-hd;
$gl-vastName: cinema;
*/
// </editor-fold>

// <editor-fold desc="GUTTERS">
$gl-gutter: 0em !default; // Total
$gl-col-bottom: $gl-gutter !default;
// </editor-fold>


// ========================================================
//     WE RECOMMEND THAT YOU DO NO EDIT BELOW THIS LINE
// ========================================================

// <editor-fold desc="DERIVATIVE BREAKPOINT VARIABLES">
$bp-micro-min: 0;
$bp-micro-max: ($bp-micro / $root-font-size)em;;
$bp-small-min: (($bp-micro + 1) / $root-font-size)em;
$bp-small-max: ($bp-small / $root-font-size)em;;
$bp-medium-min: (($bp-small + 1) / $root-font-size)em;
$bp-medium-max: ($bp-medium / $root-font-size)em;
$bp-large-min: (($bp-medium + 1) / $root-font-size)em;
$bp-large-max: ($bp-large / $root-font-size)em;
$bp-expanded-min: (($bp-large + 1) / $root-font-size)em;
$bp-expanded-max: ($bp-expanded / $root-font-size)em;
$bp-vast-min: (($bp-expanded + 1) / $root-font-size)em;
// </editor-fold>

// <editor-fold desc="MEDIA QUERIES FOR BREAKPOINTS">
$gl-mq-micro: "screen and (min-width: #{$bp-micro-min})" !default;
$gl-mq-small: "screen and (min-width: #{$bp-small-min})" !default;
$gl-mq-medium: "screen and (min-width: #{$bp-medium-min})" !default;
$gl-mq-large: "screen and (min-width: #{$bp-large-min})" !default;
$gl-mq-expanded: "screen and (mix-width: #{$bp-expanded-min})" !default;
$gl-mq-vast: "screen and (mix-width: #{$bp-vast-min})" !default;
// </editor-fold>

// Function to generate the grid by number
@mixin makeGridByNumber($grid, $columns) {
    @for $i from 1 through $columns {
        [class*="#{$grid}-#{$i}"] > .#{$gl-colName},
        [class*="#{$grid}-#{$i}"] > [class*='#{$gl-colName}-'] {
            flex-basis: 100% / $i;
            max-width: 100% / $i;
        }
    }
}

// Function to generate the grid by columns
@mixin makeCol($col, $columns) {
    .#{$gl-gridName} {

        @for $i from 1 through $columns {
            > [class*="#{$col}-#{$i}"] {
                flex-basis: 100% / (($columns / $i));
                max-width: 100% / (($columns / $i));
            }
        }
    }
}

// Function to generate the offset
@mixin makeOff($off, $columns) {

    .#{$gl-gridName},
    [class*="#{$gl-gridName}-"] {

        @for $i from 0 through $columns - 1 {
            > .push-left-#{off}-#{$i},
            > [data-push-left*="#{$off}-#{$i}"] {
                margin-left: (100% / (($columns / $i)));
            }

            > .push-right-#{off}-#{$i},
            > [data-push-right*="#{$off}-#{$i}"] {
                margin-right: (100% / (($columns / $i)));
            }
        }
    }
}
