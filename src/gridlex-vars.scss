// =========================================
//     FEEL FREE TO EDIT BELOW THIS LINE
// =========================================

// FONT SIZE BASE FOR YOUR GRID
$root-font-size: 16; // used in em calculations

// <editor-fold desc="BREAKPOINTS">
// Set each breakpoint key as the CSS name you want to use for that breakpoint (e.g. mobile, tablet, desktop, etc.)
// Set each breakpoint value as a raw number (DO NO INCLUDE A UNIT e.g use 320, not 320px or 320em)
//$breakpoints: (
//    micro: (width: 320, columns: 2, default: 1), // Max 2 columns if set explicitly. If not specified, defaults to 1 column max.
//    small: (width: 640, columns: 4, default: 2), // Max 4 columns if set explicitly. If not specified, defaults to 1 column max.
//    medium: (width: 768, columns: 6, default: 6), // Max 6 columns if set explicitly. If not specified, defaults to 6 column max.
//    large: (width: 1024, columns: 12, default: 12), // Max 12 columns if set explicitly. If not specified, defaults to 12 columns max.
//    expanded: (width: 1440, columns: 12, default: 12), // Max 12 columns if set explicitly. If not specified, defaults to 12 columns max.
//);
$breakpoints: (
    mobile: (width: 320, columns: 2, default: 1), // Max 2 columns if set explicitly. If not specified, defaults to 1 column max.
    tablet: (width: 640, columns: 4, default: 2), // Max 4 columns if set explicitly. If not specified, defaults to 1 column max.
    desktop: (width: 768, columns: 6, default: 6), // Max 6 columns if set explicitly. If not specified, defaults to 6 column max.
    desktop-hd: (width: 1024, columns: 12, default: 12), // Max 12 columns if set explicitly. If not specified, defaults to 12 columns max.
    cinema: (width: 1440, columns: 12, default: 12), // Max 12 columns if set explicitly. If not specified, defaults to 12 columns max.
);
// </editor-fold>

// <editor-fold desc="GRID SYSTEM CLASS NAMES">
$gl-gridName: grid !default;
$gl-colName: col !default;
$gl-offName: off !default;
// </editor-fold>

// <editor-fold desc="GUTTERS">
$gl-gutter: 0em !default; // Total
$gl-col-bottom: $gl-gutter !default;
// </editor-fold>


// ========================================================
//     WE RECOMMEND THAT YOU DO NO EDIT BELOW THIS LINE
// ========================================================

// <editor-fold desc="MEDIA QUERIES FOR BREAKPOINTS">
// </editor-fold>

// Function to generate the grid by number
@mixin makeGridByNumber($gridName, $breakpointName, $columns, $default) {
    // Set the default width for any column that we don't specifically recognize for this breakpoint (e.g. default to 100% width on mobile for a col-7 since mobile shouldn't have 7 columns)
    [class*="#{$gridName}-"] > .#{$gl-colName},
    [class*="#{$gridName}_#{$breakpointName}-"] > .#{$gl-colName} {
        flex-basis: 100% / $default;
        flex-grow: 1;
        min-width: 100% / $default;
    }

    .mod_shrink[class*="#{$gridName}-"] > .#{$gl-colName},
    .mod_shrink[class*="#{$gridName}_#{$breakpointName}-"] > .#{$gl-colName} {
        flex-basis: 100% / $default;
        flex-grow: 0;
        max-width: 100% / $default;
    }

    @for $i from 1 through $columns {

        .#{$gridName}-#{$i} > .#{$gl-colName},
        .#{$gridName}_#{$breakpointName}-#{$i} > .#{$gl-colName} {
            flex-basis: 100% / $i;
            flex-grow: 1;
            min-width: 100% / $i;
        }
    }
}

// Function to generate the grid by columns
@mixin makeCol($gridName, $breakpointName, $colName, $columns, $default) {

    //.#{$gridName} > [class*='#{$gl-colName}-'],
    //.#{$gridName}_#{$breakpointName} > [class*='#{$gl-colName}-']

    .#{$gridName},
    [class*="#{$gridName}-"],
    .#{$gridName}_#{$breakpointName} {


        // Set the default width for any column that we don't specifically recognize for this breakpoint (e.g. default to 100% width on mobile for a col-7 since mobile shouldn't have 7 columns)

        > [class*='col-'],
        > [class*='col_#{$breakpointName}-'] {
            flex-basis: 100% / $default;
            flex-grow: 1;
            min-width: 100% / $default;
        }

        @for $i from 1 through $columns {

            > .#{$colName}-#{$i},
            > .#{$colName}_#{$breakpointName}-#{$i} {
                flex-basis: 100% / (($columns / $i));
                flex-grow: 1;
                min-width: 100% / (($columns / $i));
            }
        }
    }
}

// Function to generate the offset
@mixin makeOff($gridName, $breakpointName, $offName, $columns, $default) {

    .#{$gridName},
    [class*="#{$gridName}-"] {

        // No special default here - if the push amount is not recognized then it will be zero

        @for $i from 0 through $columns - 1 {
            > .push-left-#{$offName}-#{$i} {
                margin-left: (100% / (($columns / $i)));
            }

            > .push-right-#{$offName}-#{$i} {
                margin-right: (100% / (($columns / $i)));
            }
        }
    }
}
