/* ==========================================================================
    GRIDLEX
    Just a Flexbox Grid System
========================================================================== */
@import "gridlex-vars";

.#{$gl-gridName},
[class*="#{$gl-gridName}-"] {
    box-sizing: border-box;
    display: flex;
    flex-flow: row wrap;
    margin: 0 (-$gl-gutter/2);
}

.#{$gl-colName},
[class*="#{$gl-colName}-"] {
    box-sizing: border-box;
    flex: 0 0 auto;
    padding: 0 ($gl-gutter/2) $gl-col-bottom;
}

.#{$gl-colName} {
    flex: 1 1 0%;
}

.#{$gl-gridName}.#{$gl-colName},
.#{$gl-gridName}[class*="#{$gl-colName}-"] {
    margin: 0;
    padding: 0;
}

/************************
    HELPERS SUFFIXES
*************************/
// FOR GRID
[class*="#{$gl-gridName}-"] {
    // No spacing between cols : noGutter
    &[class*="-noGutter"] {
        margin: 0;
        > [class*="#{$gl-colName}"] {
            padding: 0;
        }
    }

    // Horizontal alignment
    &[class*="-center"] {
        justify-content: center;
    }
    &[class*="-right"] {
        justify-content: flex-end;
        align-self: flex-end;
        margin-left: auto;
    }
    // Vertical alignment
    &[class*="-top"] {
        align-items: flex-start;
    }
    &[class*="-middle"] {
        align-items: center;
    }
    &[class*="-bottom"] {
        align-items: flex-end;
    }

    // Orders
    &[class*="-reverse"] {
        flex-direction: row-reverse;
    }
    &[class*="-column"] {
        flex-direction: column;
        > [class*="#{$gl-colName}-"] {
            flex-basis: auto;
        }
    }
    &[class*="-column-reverse"] {
        flex-direction: column-reverse;
    }

    // Spaces between and around cols
    &[class*="-spaceBetween"] {
        justify-content: space-between;
    }
    &[class*="-spaceAround"] {
        justify-content: space-around;
    }

    // Equal heights columns
    &[class*="-equalHeight"] > [class*="#{$gl-colName}"] {
        display: flex;
    }
    // Removes the padding-bottom
    &[class*="-noBottom"] > [class*="#{$gl-colName}"] {
        padding-bottom: 0;
    }
}

// FOR COL
[class*="#{$gl-colName}-"] {
    &[class*="-top"] {
        align-self: flex-start;
    }
    &[class*="-middle"] {
        align-self: center;
    }
    &[class*="-bottom"] {
        align-self: flex-end;
    }
    &[class*="-first"] {
        order: -1;
    }
    &[class*="-last"] {
        order: 1;
    }
}

// Base level grid when no specific breakpoint defined
//@include makeGridByNumber(#{$gl-gridName});

@each $breakpointName, $breakpoint in $breakpoints {
    $width: map-get($breakpoint, width);
    $default: map-get($breakpoint, default);
    $columns: map-get($breakpoint, columns);
    $widthEm: 1em * ($width / $root-font-size);

    // =================================================
    /*     GRID MEDIA QUERY #{$gl-gridName}_#{$breakpointName}    */
    // =================================================
    @media only screen and (min-width: #{$widthEm}) {
        // =================================================
        /*     GRID BY NUMBER #{$gl-gridName}_#{$breakpointName}    */
        // =================================================
        @include makeGridByNumber($gl-gridName, $breakpointName, $columns, $default);

        // =================================
        /*     COLUMNS #{$gl-gridName}_#{$breakpointName}    */
        // =================================
        @include makeCol($gl-gridName, $breakpointName, $gl-colName, $columns, $default);

        // =================================
        /*     OFFSETS #{$gl-gridName}_#{$breakpointName}    */
        // =================================
        @include makeOff($gl-gridName, $breakpointName, $gl-offName, $columns, $default);
    }
}
